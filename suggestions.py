import streamlit as st
import pandas as pd
from segmentation import *

# T√≠nh to√°n Segment d·ª±a tr√™n RFM ho·∫∑c m√£ kh√°ch h√†ng
def calculate_segment(df_RFM, customer_id=None, recency=None, frequency=None, monetary=None):
    if customer_id is not None:
        # Tr∆∞·ªùng h·ª£p ch·ªçn theo m√£ kh√°ch h√†ng
        customer_data = df_RFM[df_RFM.index == customer_id]
        if not customer_data.empty:
            return customer_data["Segment"].values[0]
        else:
            return "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†y"
    else:
        # Tr∆∞·ªùng h·ª£p ch·ªçn theo RFM t·ª´ slider
        # ƒê·ªãnh nghƒ©a nh√£n cho Recency, Frequency, Monetary
        r_labels = [3, 2, 1]  # Gi·∫£m d·∫ßn v√¨ Recency th·∫•p h∆°n l√† t·ªët h∆°n
        f_labels = [1, 2, 3]  # TƒÉng d·∫ßn v√¨ Frequency cao h∆°n l√† t·ªët h∆°n
        m_labels = [1, 2, 3]  # TƒÉng d·∫ßn v√¨ Monetary cao h∆°n l√† t·ªët h∆°n

        # T√≠nh to√°n bi√™n ph√¢n v·ªã th·ª±c t·∫ø t·ª´ d·ªØ li·ªáu
        r_bins = pd.qcut(df_RFM['Recency'], q=3, duplicates='drop', retbins=True)[1]
        f_bins = pd.qcut(df_RFM['Frequency'], q=3, duplicates='drop', retbins=True)[1]
        m_bins = pd.qcut(df_RFM['Monetary'], q=3, duplicates='drop', retbins=True)[1]

        # G√°n nh√£n cho Recency
        if recency <= r_bins[1]:
            r_label = 3
        elif recency <= r_bins[2]:
            r_label = 2
        else:
            r_label = 1

        # G√°n nh√£n cho Frequency
        if frequency <= f_bins[1]:
            f_label = 1
        elif frequency <= f_bins[2]:
            f_label = 2
        else:
            f_label = 3

        # G√°n nh√£n cho Monetary
        if monetary <= m_bins[1]:
            m_label = 1
        elif monetary <= m_bins[2]:
            m_label = 2
        else:
            m_label = 3

        # Hi·ªÉn th·ªã nh√£n
        # st.write(f"R label for {recency}: {r_label}")
        # st.write(f"F label for {frequency}: {f_label}")
        # st.write(f"M label for {monetary}: {m_label}")

        # T·∫°o RFM segment
        RFM_segment = f"{r_label}{f_label}{m_label}"

        # Ki·ªÉm tra xem c√≥ kh√°ch h√†ng n√†o kh·ªõp ch√≠nh x√°c kh√¥ng
        customer_data = df_RFM[
            (df_RFM['Recency'] == recency) & 
            (df_RFM['Frequency'] == frequency) & 
            (abs(df_RFM['Monetary'] - monetary) < 1)
        ]
        
        if customer_data.empty:
            return None, segment_customers(RFM_segment)
        else:
            return customer_data.index[0], segment_customers(RFM_segment)

# Hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c kinh doanh cho nh√≥m kh√°ch h√†ng
def display_strategy(segment):
    if segment == "Champions":
        st.markdown("""
        ### üéÅ Chi·∫øn l∆∞·ª£c ∆∞u ƒë√£i d√†nh cho kh√°ch h√†ng Champions

        - üéØ **Ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm** ƒë·ªïi qu√† ho·∫∑c voucher  
        - üíå **∆Øu ƒë√£i ƒë·∫∑c bi·ªát** (gi·∫£m **5% - 10%**) g·ª≠i qua **SMS / Email / M·∫°ng x√£ h·ªôi**
        - üéâ **Voucher tri √¢n** d√†nh cho kh√°ch h√†ng th∆∞·ªùng xuy√™n
        """)
    elif segment == "Loyal":
        st.markdown("""
        ### üéâ Chi·∫øn l∆∞·ª£c ∆∞u ƒë√£i d√†nh cho kh√°ch h√†ng Loyal

        - üõçÔ∏è **∆Øu ƒë√£i theo m·ªëc mua h√†ng** d√†nh ri√™ng cho kh√°ch h√†ng th√¢n thi·∫øt  
        - üéÇ **Khuy·∫øn m√£i d·ªãp l·ªÖ v√† sinh nh·∫≠t** ‚Äì g·ª≠i tr·ª±c ti·∫øp qua SMS ho·∫∑c Email  
        - üéÅ **T·∫∑ng voucher tri √¢n** khi kh√°ch h√†ng tham gia g√≥p √Ω c·∫£i thi·ªán d·ªãch v·ª•
        """)
    elif segment == "Needs Attention":
        st.markdown("""
        ### üéÅ G·ª£i √Ω ∆∞u ƒë√£i tƒÉng t∆∞∆°ng t√°c v·ªõi kh√°ch h√†ng Needs Attention

        - üíå **∆Øu ƒë√£i nh·ªè (5% - 10%)** g·ª≠i qua SMS / Email  
        - üé´ **Phi·∫øu gi·∫£m gi√°** cho l·∫ßn mua h√†ng ti·∫øp theo  
        - üéÅ **T·∫∑ng qu√†** cho kh√°ch h√†ng tham gia kh·∫£o s√°t ho·∫∑c ph·∫£n h·ªìi
        """)
    elif segment == "Inactive":
        st.markdown("""
        ### ‚è≥ G·ª£i √Ω ∆∞u ƒë√£i tƒÉng t∆∞∆°ng t√°c v·ªõi kh√°ch h√†ng Inactive

        - üéÅ **∆Øu ƒë√£i gi·ªõi h·∫°n th·ªùi gian** ho·∫∑c **qu√† t·∫∑ng ƒë·∫∑c bi·ªát**
        - üé´ **Voucher gi·∫£m gi√°** cho kh√°ch h√†ng ti·ªÅm nƒÉng / trung th√†nh
        """)
# G·ª£i √Ω chi·∫øn l∆∞·ª£c
def strategy_suggestions():
    st.image("images/suggestion.png", width=1200) 
    st.title("G·ª£i √Ω chi·∫øn l∆∞·ª£c")
    
    # D·ªØ li·ªáu ph√¢n kh√∫c kh√°ch h√†ng
    data = {
        "T√™n Ph√¢n Kh√∫c": ["üëë Champions", "üíñ Loyal", "üïµÔ∏è Needs Attention", "üí§ Inactive"],
        "M√¥ T·∫£": [
            "Kh√°ch h√†ng t·ªët nh·∫•t - mua th∆∞·ªùng xuy√™n v√† chi ti√™u cao",
            "Kh√°ch h√†ng trung th√†nh - mua h√†ng th∆∞·ªùng xuy√™n, bao g·ªìm c·∫£ kh√°ch m·ªõi",
            "Kh√°ch h√†ng ch∆∞a mua g·∫ßn ƒë√¢y nh∆∞ng v·∫´n c√≥ gi√° tr·ªã",
            "Kh√°ch h√†ng kh√¥ng c√≤n t∆∞∆°ng t√°c - c√≥ m·ª©c ƒë·ªô tham gia r·∫•t th·∫•p"
        ]
    }

    # T·∫°o DataFrame
    df = pd.DataFrame(data)

    # Hi·ªÉn th·ªã b·∫£ng tr√™n Streamlit
    st.title("üìù Ph√¢n Kh√∫c Kh√°ch H√†ng")
    st.table(df)
    
    st.write("""
    D·ª±a tr√™n d·ªØ li·ªáu ph√¢n c·ª•m, ch√∫ng t√¥i s·∫Ω g·ª£i √Ω c√°c chi·∫øn l∆∞·ª£c marketing ph√π h·ª£p cho t·ª´ng nh√≥m kh√°ch h√†ng.
    """)
        # T·∫°o ch·ª©c nƒÉng l·ª±a ch·ªçn d·ªØ li·ªáu
    data_option = st.radio("Ch·ªçn d·ªØ li·ªáu", ("D·ªØ li·ªáu hi·ªán c√≥", "T·∫£i d·ªØ li·ªáu m·ªõi"))
    data = None

    # N·∫øu ng∆∞·ªùi d√πng ch·ªçn d·ªØ li·ªáu hi·ªán c√≥
    if data_option == "D·ªØ li·ªáu hi·ªán c√≥":
        data = pd.read_csv("data/processed_data.csv")
    # N·∫øu ng∆∞·ªùi d√πng ch·ªçn t·∫£i d·ªØ li·ªáu m·ªõi
    elif data_option == "T·∫£i d·ªØ li·ªáu m·ªõi":
        upload_file = st.file_uploader("T·∫£i l√™n d·ªØ li·ªáu kinh doanh (CSV)", type=["csv"], key="upload_4")

        if upload_file is not None:
            # ƒê·ªçc v√† l√†m s·∫°ch d·ªØ li·ªáu
            data = pd.read_csv(upload_file)
    
    if data is not None:
        data["Date"] = pd.to_datetime(data["Date"], errors="coerce", dayfirst=True)

        # Tao RFM dataframe
        df_RFM_slider = rfm_transform_data(data)
        rfm_agg, df_RFM = rfm_segmentation(df_RFM_slider)
        st.write("D·ªØ li·ªáu kh√°ch h√†ng:")
        st.write(df_RFM)
        st.write("D·ªØ li·ªáu ph√¢n nh√≥m kh√°ch h√†ng:")
        st.write(rfm_agg)
        # st.write("D·ªØ li·ªáu ph√¢n nh√≥m RFM:")
        # st.write(df_RFM_slider)
        
        # T·∫°o radio button ƒë·ªÉ ch·ªçn ph∆∞∆°ng √°n
        selection_method = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c ph√¢n kh√∫c", ("Theo m√£ kh√°ch h√†ng", "Theo RFM"))

        # X·ª≠ l√Ω theo ph∆∞∆°ng √°n ƒë√£ ch·ªçn
        if selection_method == "Theo m√£ kh√°ch h√†ng":
            st.header("Ch·ªçn M√£ Kh√°ch H√†ng")
            customer_choices = df_RFM.index.tolist()
            selected_customer = st.selectbox("Ch·ªçn m√£ kh√°ch h√†ng", customer_choices)
            
            if selected_customer:
                segment = calculate_segment(df_RFM, customer_id=selected_customer)
                st.write(f"Kh√°ch h√†ng s·ªë {selected_customer} thu·ªôc nh√≥m: {segment}")
                st.markdown(f"üìä Kh√°ch h√†ng s·ªë {selected_customer} thu·ªôc nh√≥m: **üü¢ {segment}**")
                display_strategy(segment)

        elif selection_method == "Theo RFM":
            st.header("Ch·ªçn theo RFM")
            recency = st.slider("Recency", min_value=df_RFM['Recency'].min(), max_value=df_RFM['Recency'].max(), value=int(df_RFM['Recency'].mean()))
            frequency = st.slider("Frequency", min_value=df_RFM['Frequency'].min(), max_value=df_RFM['Frequency'].max(), value=int(df_RFM['Frequency'].mean()))
            monetary = st.slider("Monetary", min_value=int(df_RFM['Monetary'].min()), max_value=int(df_RFM['Monetary'].max()), value=int(df_RFM['Monetary'].mean()))

            if recency is not None and frequency is not None and monetary is not None:
                cus_number, segment_rfm = calculate_segment(df_RFM_slider, recency=recency, frequency=frequency, monetary=monetary)
                if cus_number is not None:
                    st.write(f"Kh√°ch h√†ng s·ªë {cus_number} thu·ªôc nh√≥m: {segment_rfm}")
                else:
                    st.write("D·ªØ li·ªáu kh√¥ng c√≥ kh√°ch h√†ng n√†o v·ªõi th√¥ng s·ªë n√†y.")
                    st.markdown(f"üìä D·ª±a tr√™n c√°c gi√° tr·ªã RFM, nh√≥m kh√°ch h√†ng n√†y l√†: **üü¢ {segment_rfm}**")
                display_strategy(segment_rfm)